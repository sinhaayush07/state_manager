{"version":3,"sources":["webpack://StateManager/webpack/universalModuleDefinition","webpack://StateManager/webpack/bootstrap","webpack://StateManager/./store/pubsub.js","webpack://StateManager/./store/store.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","PubSub","this","events","Map","subscriberCount","event","callback","options","Error","has","set","Set","subscriber","id","once","add","unsubscribe","subscribe","subscribers","sub","delete","size","data","toRemove","notifiedCount","push","error","console","forEach","clear","Array","from","keys","mutations","state","batchUpdates","pendingUpdates","batchTimeout","self","deepEqual","a","b","isArray","length","keysA","keysB","includes","Proxy","target","receiver","clearTimeout","setTimeout","flushBatchUpdates","publish","updates","warn","newState","assign","enabled","log"],"mappings":"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","file":"state_manager.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"StateManager\"] = factory();\n\telse\n\t\troot[\"StateManager\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export class PubSub {\n  constructor() {\n    this.events = new Map()\n    this.subscriberCount = 0\n  }\n\n  /**\n   * Subscribe to an event\n   * @param {string} event - event to subscribe\n   * @param {function} callback - callback function to be registered\n   * @param {object} options - subscription options\n   * @returns {function} unsubscribe function\n   */\n  subscribe(event, callback, options = {}) {\n    if (typeof event !== 'string' || typeof callback !== 'function') {\n      throw new Error('Event must be a string and callback must be a function')\n    }\n\n    if (!this.events.has(event)) {\n      this.events.set(event, new Set())\n    }\n\n    const subscriber = {\n      id: ++this.subscriberCount,\n      callback,\n      once: options.once || false\n    }\n\n    this.events.get(event).add(subscriber)\n\n    // Return unsubscribe function\n    return () => this.unsubscribe(event, subscriber)\n  }\n\n  /**\n   * Subscribe to an event once (auto-unsubscribe after first call)\n   * @param {string} event - event to subscribe\n   * @param {function} callback - callback function\n   * @returns {function} unsubscribe function\n   */\n  once(event, callback) {\n    return this.subscribe(event, callback, { once: true })\n  }\n\n  /**\n   * Unsubscribe from an event\n   * @param {string} event - event name\n   * @param {object} subscriber - subscriber object or callback function\n   */\n  unsubscribe(event, subscriber) {\n    if (!this.events.has(event)) return\n\n    const subscribers = this.events.get(event)\n\n    if (typeof subscriber === 'function') {\n      // Remove by callback function\n      for (const sub of subscribers) {\n        if (sub.callback === subscriber) {\n          subscribers.delete(sub)\n          break\n        }\n      }\n    } else {\n      // Remove by subscriber object\n      subscribers.delete(subscriber)\n    }\n\n    // Clean up empty event sets\n    if (subscribers.size === 0) {\n      this.events.delete(event)\n    }\n  }\n\n  /**\n   * Publish an event to all subscribers\n   * @param {string} event - event name\n   * @param {any} data - data to pass to subscribers\n   * @returns {number} number of subscribers notified\n   */\n  publish(event, data) {\n    if (!this.events.has(event)) {\n      return 0\n    }\n\n    const subscribers = this.events.get(event)\n    const toRemove = []\n\n    let notifiedCount = 0\n\n    for (const subscriber of subscribers) {\n      try {\n        subscriber.callback(data, event)\n        notifiedCount++\n\n        // Mark for removal if it's a once subscription\n        if (subscriber.once) {\n          toRemove.push(subscriber)\n        }\n      } catch (error) {\n        console.error(`Error in subscriber callback for event '${event}':`, error)\n      }\n    }\n\n    // Remove once subscriptions\n    toRemove.forEach(sub => subscribers.delete(sub))\n\n    // Clean up empty event sets\n    if (subscribers.size === 0) {\n      this.events.delete(event)\n    }\n\n    return notifiedCount\n  }\n\n  /**\n   * Get the number of subscribers for an event\n   * @param {string} event - event name\n   * @returns {number} subscriber count\n   */\n  subscriberCount(event) {\n    return this.events.has(event) ? this.events.get(event).size : 0\n  }\n\n  /**\n   * Clear all subscribers for an event\n   * @param {string} event - event name (optional, clears all if not provided)\n   */\n  clear(event) {\n    if (event) {\n      this.events.delete(event)\n    } else {\n      this.events.clear()\n    }\n  }\n\n  /**\n   * Get all event names\n   * @returns {string[]} array of event names\n   */\n  getEvents() {\n    return Array.from(this.events.keys())\n  }\n}","import { PubSub } from \"./pubsub\"\n\nexport class Store {\n  constructor({ mutations, state, options = {} }) {\n    this.mutations = mutations || {}\n    this.events = new PubSub()\n    this.batchUpdates = options.batchUpdates || false\n    this.pendingUpdates = new Set()\n    this.batchTimeout = null\n\n    let self = this\n\n    // Deep comparison utility\n    const deepEqual = (a, b) => {\n      if (a === b) return true\n      if (a == null || b == null) return false\n      if (typeof a !== typeof b) return false\n      if (typeof a === 'object') {\n        if (Array.isArray(a) !== Array.isArray(b)) return false\n        if (Array.isArray(a)) {\n          if (a.length !== b.length) return false\n          for (let i = 0; i < a.length; i++) {\n            if (!deepEqual(a[i], b[i])) return false\n          }\n          return true\n        }\n        const keysA = Object.keys(a)\n        const keysB = Object.keys(b)\n        if (keysA.length !== keysB.length) return false\n\n        for (const key of keysA) {\n          if (!keysB.includes(key) || !deepEqual(a[key], b[key])) return false\n        }\n        return true\n      }\n      return false\n    }\n\n    this.state = new Proxy((state || {}), {\n      set: function (target, property, value, receiver) {\n        // Deep comparison to avoid unnecessary updates\n        if (deepEqual(value, receiver[property])) {\n          return true\n        }\n\n        target[property] = value\n\n        if (self.batchUpdates) {\n          self.pendingUpdates.add(property)\n          if (self.batchTimeout) {\n            clearTimeout(self.batchTimeout)\n          }\n          self.batchTimeout = setTimeout(() => {\n            self.flushBatchUpdates()\n          }, 0)\n        } else {\n          self.events.publish(property, value)\n        }\n\n        return true\n      },\n      get: function (target, property) {\n        if (!target.hasOwnProperty(property)) {\n          return undefined // Return undefined instead of string for better error handling\n        }\n        return target[property]\n      }\n    })\n  }\n\n  /**\n   * Flush pending batch updates\n   */\n  flushBatchUpdates() {\n    if (this.pendingUpdates.size === 0) return\n\n    const updates = Array.from(this.pendingUpdates)\n    this.pendingUpdates.clear()\n    this.batchTimeout = null\n\n    // Publish all updates\n    updates.forEach(property => {\n      this.events.publish(property, this.state[property])\n    })\n  }\n\n  /**\n   * Commit a mutation\n   * @param {string} key - mutation key\n   * @param {any} data - mutation data\n   * @returns {boolean} success status\n   */\n  commit(key, data) {\n    if (!this.mutations[key]) {\n      console.warn(`Mutation '${key}' does not exist`)\n      return false\n    }\n    try {\n      const newState = this.mutations[key](this.state, data)\n      if (newState && typeof newState === 'object') {\n        // Use Object.assign to trigger proxy setters\n        Object.assign(this.state, newState)\n      }\n      return true\n    } catch (error) {\n      console.error(`Error in mutation '${key}':`, error)\n      return false\n    }\n  }\n\n  /**\n   * Get current state\n   * @returns {object} current state\n   */\n  getState() {\n    return { ...this.state }\n  }\n\n  /**\n   * Subscribe to state changes\n   * @param {string} property - property to watch\n   * @param {function} callback - callback function\n   * @param {object} options - subscription options\n   * @returns {function} unsubscribe function\n   */\n  subscribe(property, callback, options = {}) {\n    return this.events.subscribe(property, callback, options)\n  }\n\n  /**\n   * Subscribe to state changes once\n   * @param {string} property - property to watch\n   * @param {function} callback - callback function\n   * @returns {function} unsubscribe function\n   */\n  subscribeOnce(property, callback) {\n    return this.events.once(property, callback)\n  }\n\n  /**\n   * Unsubscribe from state changes\n   * @param {string} property - property name\n   * @param {function} callback - callback function\n   */\n  unsubscribe(property, callback) {\n    this.events.unsubscribe(property, callback)\n  }\n\n  /**\n   * Clear all subscriptions\n   * @param {string} property - optional property to clear (clears all if not provided)\n   */\n  clearSubscriptions(property) {\n    this.events.clear(property)\n  }\n\n  /**\n   * Get subscriber count for a property\n   * @param {string} property - property name\n   * @returns {number} subscriber count\n   */\n  getSubscriberCount(property) {\n    return this.events.subscriberCount(property)\n  }\n\n  /**\n   * Enable/disable batch updates\n   * @param {boolean} enabled - whether to enable batch updates\n   */\n  setBatchUpdates(enabled) {\n    this.batchUpdates = enabled\n    if (!enabled && this.pendingUpdates.size > 0) {\n      this.flushBatchUpdates()\n    }\n  }\n\n  /**\n   * Debug method to log state\n   * @param {string} key - optional property key\n   */\n  stateLogger(key) {\n    if (key) {\n      console.log(`State[${key}]:`, this.state[key])\n    } else {\n      console.log('Full State:', this.state)\n    }\n  }\n}"],"sourceRoot":""}